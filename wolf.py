#!/usr/bin/env python3
import os
import sys
import subprocess
import requests
import shutil
from time import sleep

# Configura√ß√µes (ajustadas para Termux com SDCard)
HOME = os.path.expanduser("~")
PASTA_DOWNLOADS = "/sdcard/WolfVideos"
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
ARQUIVO_COOKIES = "/sdcard/cookies.txt"
URL_ATUALIZACAO_COOKIES = "https://jottap-termux.github.io/cookies.txt"
ATUALIZAR_COOKIES_AUTO = True
TERMUX_PATH = "/data/data/com.termux/files/home/.local/bin"

# Formatos pr√©-definidos atualizados
FORMATOS_VIDEO = {
    '1': {'desc': 'üéØ Best quality (4K if available)', 'code': 'best'},
    '2': {'desc': 'üñ• 1080p HD', 'code': '137+140'},
    '3': {'desc': 'üíª 720p HD', 'code': '22'},
    '4': {'desc': 'üì± 480p', 'code': '135+140'},
    '5': {'desc': 'üìº 360p', 'code': '18'}
}

FORMATOS_AUDIO = {
    '1': {'desc': 'üéß MP3 (High quality 320kbps)', 'code': 'mp3', 'params': '-x --audio-format mp3 --audio-quality 0'},
    '2': {'desc': 'üéµ AAC (High quality)', 'code': 'aac', 'params': '-x --audio-format aac'},
    '3': {'desc': 'üéº FLAC (Lossless)', 'code': 'flac', 'params': '-x --audio-format flac'},
    '4': {'desc': 'üé§ M4A (YouTube default)', 'code': 'm4a', 'params': '-x --audio-format m4a'},
    '5': {'desc': 'üé∂ OPUS (Efficient)', 'code': 'opus', 'params': '-x --audio-format opus'},
    '6': {'desc': 'üíø MP3 with cover art', 'code': 'mp3', 'params': '-x --audio-format mp3 --audio-quality 0 --embed-thumbnail --add-metadata'}
}

def verificar_e_configurar_ambiente():
    """Verifica e configura todo o ambiente necess√°rio"""
    print("\033[1;34m[‚Ä¢] Configurando ambiente...\033[0m")

    # Verifica se est√° no Termux
    is_termux = 'com.termux' in HOME

    # Configura PATH para Termux
    if is_termux:
        configurar_path_termux()

    # Cria pasta de downloads
    os.makedirs(PASTA_DOWNLOADS, exist_ok=True)
    print(f"\033[1;32m[‚úì] Pasta de downloads: {PASTA_DOWNLOADS}\033[0m")

    # Instala depend√™ncias
    if not instalar_dependencias_auto():
        sys.exit(1)

    # Configura cookies
    criar_cookies()

    # Atualiza cookies se necess√°rio
    if ATUALIZAR_COOKIES_AUTO:
        atualizar_cookies()

def configurar_path_termux():
    """Configura o PATH para incluir bin√°rios do pip no Termux"""
    if TERMUX_PATH not in os.environ["PATH"]:
        with open(os.path.join(HOME, ".bashrc"), "a") as f:
            f.write(f'\nexport PATH="$PATH:{TERMUX_PATH}"\n')
        os.environ["PATH"] += f":{TERMUX_PATH}"
        print("\033[1;33m[‚Ä¢] PATH configurado para Termux\033[0m")

def instalar_dependencias_auto():
    """Instala automaticamente todas as depend√™ncias necess√°rias"""
    print("\033[1;34m[‚Ä¢] Instalando/Atualizando depend√™ncias...\033[0m")

    try:
        # Verifica se est√° no Termux
        is_termux = 'com.termux' in HOME

        if is_termux:
            # Tentativa de desbloquear o apt se estiver travado
            try:
                subprocess.run(["rm", "-f", "/data/data/com.termux/files/usr/var/lib/apt/lists/lock"], check=False)
                subprocess.run(["rm", "-f", "/data/data/com.termux/files/usr/var/cache/apt/archives/lock"], check=False)
            except:
                pass

            # Comandos para Termux com tratamento de erros
            def run_termux_command(cmd):
                try:
                    subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    return True
                except subprocess.CalledProcessError:
                    return False

            # Tentativa de atualizar pacotes
            if not run_termux_command(["pkg", "update", "-y"]):
                print("\033[1;33m[‚Ä¢] Tentando m√©todo alternativo de atualiza√ß√£o...\033[0m")
                subprocess.run(["apt", "update", "-y"], check=True)

            # Instala pacotes essenciais
            packages = ["python", "ffmpeg", "libxml2", "libxslt", "binutils", "wget", "git"]
            for pkg in packages:
                if not run_termux_command(["pkg", "install", "-y", pkg]):
                    print(f"\033[1;33m[‚Ä¢] Tentando instalar {pkg} com apt...\033[0m")
                    subprocess.run(["apt", "install", "-y", pkg], check=True)

            # Instala pip se n√£o existir
            if not shutil.which("pip"):
                subprocess.run(["pkg", "install", "-y", "python-pip"], check=True)

            # Instala yt-dlp e requests
            subprocess.run([sys.executable, "-m", "pip", "install", "--user", "--upgrade", "yt-dlp", "requests"], check=True)

            # Garante que o yt-dlp est√° acess√≠vel
            if not shutil.which("yt-dlp"):
                print("\033[1;33m[‚Ä¢] Configurando yt-dlp...\033[0m")
                ytdlp_path = os.path.join(TERMUX_PATH, "yt-dlp")
                if not os.path.exists(TERMUX_PATH):
                    os.makedirs(TERMUX_PATH, exist_ok=True)
                subprocess.run(["ln", "-s", f"{HOME}/.local/bin/yt-dlp", ytdlp_path], check=True)
        else:
            # Comandos para Linux tradicional
            subprocess.run(["sudo", "apt", "update", "-y"], check=True)
            subprocess.run(["sudo", "apt", "upgrade", "-y"], check=True)
            subprocess.run(["sudo", "apt", "install", "-y", "python3", "python3-pip", "ffmpeg", "wget"], check=True)
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "yt-dlp", "requests"], check=True)

        print("\033[1;32m[‚úì] Depend√™ncias instaladas/atualizadas!\033[0m")

        # Verifica instala√ß√£o do yt-dlp
        if not verificar_yt_dlp():
            print("\033[1;31m[!] Falha cr√≠tica: yt-dlp n√£o instalado corretamente\033[0m")
            return False

        return True
    except Exception as e:
        print(f"\033[1;31m[!] Erro durante instala√ß√£o: {e}\033[0m")
        print("\033[1;33m[‚Ä¢] Voc√™ pode tentar instalar manualmente:")
        print("  1. pkg update && pkg upgrade")
        print("  2. pkg install -y python ffmpeg libxml2 libxslt binutils wget")
        print("  3. pip install --user yt-dlp requests")
        print("  4. ln -s ~/.local/bin/yt-dlp ~/.local/bin/yt-dlp\033[0m")
        return False

def verificar_yt_dlp():
    """Verifica se o yt-dlp est√° instalado e acess√≠vel"""
    try:
        # Verifica se o comando existe
        if not shutil.which("yt-dlp"):
            # Tenta encontrar o caminho manualmente no Termux
            termux_ytdlp = f"{TERMUX_PATH}/yt-dlp"
            if os.path.exists(termux_ytdlp):
                os.environ["PATH"] += f":{TERMUX_PATH}"
                return True
            return False

        # Verifica a vers√£o
        result = subprocess.run(["yt-dlp", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"\033[1;32m[‚úì] yt-dlp vers√£o {result.stdout.strip()} instalado\033[0m")
            return True
        return False
    except Exception:
        return False

def clear_screen():
    os.system('clear' if os.name == 'posix' else 'cls')

def mostrar_banner():
    print("""\033[1;36m
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∂‚†∂‚¢¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†Å‚†Ä‚†∏‚†õ‚¢≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†π‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚¢ø‚†Ä‚£¥‚†ü‚†∑‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚°ü‚†Ä‚¢∏‚£ø‚†É‚†Ä‚†Ä‚†ò‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚°ø‚†ø‚†ü‚¢ø‚°è‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£§‚£æ‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚£º‚°á‚†Ä‚†Ä‚†Ä‚£∏‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°æ‚†õ‚°ã‚†â‚£©‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£∑‚£∞‚†ü‚†ã‚†Å‚†Ä‚†Ä‚¢†‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†è‚¢†‚°û‚£±‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†É‚¢Ä‚£ø‚¢Å‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚¢∞‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°æ‚†Å‚†Ä‚¢∏‚£ø‚£ø‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä‚¢Ä‚£∂‚£æ‚°á‚¢∏‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚°ø‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£æ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£è‚£†‚¢∞‚¢ª‚°ü‚¢É‚°ø‚°ü‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚¢ø‚†π‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∫‚†è‚£ø‚£ø‚†º‚†Å‚†à‚†∞‚†É‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚°ü‚†É‚†Ä‚†à‚¢ª‚£∑‚£Ñ‚†à‚†Å‚£ø‚£ø‚°á‚†Ä‚†Ä‚†à‚£ß‚†Ä‚†Ä‚†Ä‚†ò‚£†‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†ü‚†Ä‚†Ä‚£¥‚†Ä‚†Ä‚£ø‚°ø‚†Ä‚†∏‚†ã‚¢∏‚£ø‚£ß‚°ê‚£¶‚£∏‚°Ü‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°ø‚†É‚†Ä‚£Ä‚£¥‚£ø‚°Ü‚¢Ä‚£ø‚†É‚†Ä‚†Ä‚†Ä‚£∏‚†ü‚¢π‚£∑‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£æ‚°è‚†õ‚†ª‚†ø‚£ø‚£ø‚£ø‚†Å‚£º‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚¢∏‚£ø‚†ô‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†≤‚¢æ‚£ø‚£ø‚£ø‚£ø‚£á‚¢Ä‚£†‚£¥‚£ø‚°ø‚¢Å‚£º‚£ø‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†â‚†ô‚†õ‚†ª‚£ø‚£∑‚£∂‚£ø‚£∑‚†æ‚£ø‚£µ‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚¢ø‚°Ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚°ü‚£¥‚†Ä‚†Ä‚†â‚†â‚†Å‚¢ø‚°á‚£¥‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚†ø‚£ø‚£ø‚¢†‚†á‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚¢ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚£Ä‚†Ä‚†Ä‚¢∏‚£ø‚°Ñ‚†Ä‚†Ä‚£º‚£ø‚£á‚¢π‚°ü‚¢ø‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†É‚£†‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°à‚¢ø‚£Ü‚†Ä‚¢≥‚°Ä‚†Ä‚¢†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£¶‚†Ä‚£∏‚†ø‚£∑‚°Ä‚†Ä‚£ø‚£ø‚¢ø‚£æ‚£ø‚†∏‚†á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ã‚£∞‚£ø‚£ø‚£ø‚£ø‚°Ä‚¢∞‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚£Ü‚£º‚£∑‚£Ñ‚†à‚¢∑‚°Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚¢ø‚£∂‚†ü‚†Ä‚†ô‚£∑‚£º‚£ø‚£ø‚°Ñ‚†ª‚£ø‚£ß‚°Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚°Ñ‚†ª‚£∑‚£º‚£ø‚£¶‚°Ä‚†Ä‚£º‚†á‚†∏‚†ã‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£∑‚°Ä‚†à‚†ª‚£∑‚°Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£º‚°ø‚¢ª‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†à‚†ª‚£∑‚°ô‚£ø‚£∂‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£∑‚¢†‚£Ä‚†ò‚£∑‚°Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†á‚£æ‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†à‚†õ‚¢ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚†Ä‚¢ª‚£∑‚£æ‚°á
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢†‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ì‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚¢à‚£ø‚°π‚£∑
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†ª‚†ø‚†ø‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚°á‚†â

‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà
‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó
 ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
 ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
 ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 \033[1;32m_______________________________________________
  ‚Ä¢ insta:jottap_62 ‚Ä¢ by jottap_62 ‚Ä¢ v6.0 ‚Ä¢ Wolf Edition‚Ä¢ |
 ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ
\033[1;33m‚Ä¢ Recursos Premium:
  ‚úî Download de v√≠deos 4K/1080p
  ‚úî Convers√£o para MP3 com qualidade de est√∫dio
  ‚úî Bypass de paywalls e restri√ß√µes
  ‚úî Sistema de cookies autom√°tico
  ‚úî Player integrado com pr√©-visualiza√ß√£o
  ‚úî Suporte a m√∫ltiplas plataformas\033[0m""")

def criar_cookies():
    """Cria arquivo de cookies padr√£o se n√£o existir"""
    try:
        if not os.path.exists(ARQUIVO_COOKIES):
            cookies_padrao = """# Netscape HTTP Cookie File
.xvideos.com    TRUE    /       FALSE   1735689600      ts      1
.xvideos.com    TRUE    /       FALSE   1735689600      platform      pc
.xvideos.com    TRUE    /       FALSE   1735689600      hash    5a8d9f8e7c6b5a4d3e2f1
"""
            with open(ARQUIVO_COOKIES, 'w') as f:
                f.write(cookies_padrao)
            print("\033[1;33m[‚Ä¢] Arquivo de cookies criado em:", ARQUIVO_COOKIES, "\033[0m")
    except PermissionError:
        print("\033[1;31m[!] Erro de permiss√£o. Tentando criar cookies em local alternativo...\033[0m")
        # Usa um caminho alternativo dentro do Termux
        alt_cookies = os.path.join(HOME, ".cookies.txt")
        with open(alt_cookies, 'w') as f:
            f.write(cookies_padrao)
        print("\033[1;33m[‚Ä¢] Arquivo de cookies criado em:", alt_cookies, "\033[0m")
        return alt_cookies
    return ARQUIVO_COOKIES

def verificar_dependencias():
    """Verifica e instala depend√™ncias necess√°rias"""
    print("\033[1;34m[‚Ä¢] Verificando depend√™ncias...\033[0m")

    # Verifica yt-dlp
    try:
        subprocess.run(["yt-dlp", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("\033[1;32m[‚úì] yt-dlp j√° est√° instalado\033[0m")
    except:
        print("\033[1;33m[‚Ä¢] Instalando yt-dlp...\033[0m")
        subprocess.run([sys.executable, "-m", "pip", "install", "--user", "yt-dlp"], check=True)

    # Verifica ffmpeg
    try:
        subprocess.run(["ffmpeg", "-version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("\033[1;32m[‚úì] ffmpeg j√° est√° instalado\033[0m")
    except:
        print("\033[1;31m[!] ffmpeg n√£o encontrado. √â necess√°rio para convers√£o MP3.\033[0m")
        if 'com.termux' in HOME:
            print("\033[1;33m[‚Ä¢] Execute: pkg install ffmpeg -y\033[0m")
        else:
            print("\033[1;33m[‚Ä¢] Execute: sudo apt install ffmpeg -y\033[0m")

    # Verifica cookies
    if not os.path.exists(ARQUIVO_COOKIES):
        criar_cookies()
    else:
        print("\033[1;32m[‚úì] Arquivo de cookies encontrado\033[0m")

def atualizar_ferramentas():
    """Atualiza o yt-dlp corretamente via pip"""
    print("\033[1;33m[‚Ä¢] Atualizando ferramentas...\033[0m")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--user", "--upgrade", "yt-dlp", "requests"], check=True)
        print("\033[1;32m[‚úì] Ferramentas atualizadas com sucesso!\033[0m")
    except Exception as e:
        print(f"\033[1;31m[!] Erro ao atualizar: {e}\033[0m")

def atualizar_cookies():
    """Atualiza cookies a partir da URL"""
    try:
        print("\033[1;34m[‚Ä¢] Baixando novos cookies...\033[0m")
        headers = {'User-Agent': USER_AGENT}
        response = requests.get(URL_ATUALIZACAO_COOKIES, headers=headers, timeout=10)

        if response.status_code == 200:
            with open(ARQUIVO_COOKIES, 'w') as f:
                f.write(response.text)
            print("\033[1;32m[‚úì] Cookies atualizados com sucesso!\033[0m")
        else:
            print("\033[1;31m[!] Falha ao baixar cookies. Status code:", response.status_code, "\033[0m")
    except Exception as e:
        print(f"\033[1;31m[!] Erro ao atualizar cookies: {str(e)}\033[0m")

def mostrar_menu_video_qualidade():
    """Mostra menu de qualidade para v√≠deos"""
    print("""\033[1;36m
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        üìΩ  VIDEO QUALITY OPTIONS        ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë 1. üéØ Best quality (4K if available)   ‚ïë
‚ïë 2. üñ•  1080p HD                         ‚ïë
‚ïë 3. üíª  720p HD                         ‚ïë
‚ïë 4. üì±  480p                            ‚ïë
‚ïë 5. üìº  360p                            ‚ïë
‚ïë 0. üö™ Voltar                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
\033[0m""")

def mostrar_menu_audio_formatos():
    """Mostra menu de formatos para √°udio"""
    print("""\033[1;36m
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        üéµ AUDIO FORMAT OPTIONS         ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë 1. üéß MP3 (High quality 320kbps)       ‚ïë
‚ïë 2. üéµ AAC (High quality)               ‚ïë
‚ïë 3. üéº FLAC (Lossless)                  ‚ïë
‚ïë 4. üé§ M4A (YouTube default)            ‚ïë
‚ïë 5. üé∂ OPUS (Efficient)                 ‚ïë
‚ïë 6. üíø MP3 with cover art               ‚ïë
‚ïë 0. üö™ Voltar                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
\033[0m""")

def listar_formatos(link):
    """Lista os formatos dispon√≠veis para download"""
    print("\033[1;36m[‚Ä¢] Listando formatos dispon√≠veis...\033[0m")
    try:
        subprocess.run(f'yt-dlp --cookies "{ARQUIVO_COOKIES}" -F "{link}"', shell=True)

        # Mostra menu de qualidade ap√≥s listar formatos
        while True:
            mostrar_menu_video_qualidade()
            opcao = input("\n\033[1;36müé¨ Escolha uma op√ß√£o [0-5]: \033[0m").strip()

            if opcao == "0":
                break
            elif opcao in FORMATOS_VIDEO:
                qualidade = FORMATOS_VIDEO[opcao]['code']
                if baixar_video(link, 'mp4', qualidade):
                    print(f"\033[1;32m[‚úì] Arquivo salvo em: {PASTA_DOWNLOADS}\033[0m")
                break
            else:
                print("\033[1;31m[!] Op√ß√£o inv√°lida. Tente novamente.\033[0m")

    except Exception as e:
        print(f"\033[1;31m[!] Erro ao listar formatos: {str(e)}\033[0m")

def baixar_multiplas_urls(tipo='video'):
    """Baixa m√∫ltiplas URLs de uma vez"""
    print("\033[1;36m[‚Ä¢] Modo m√∫ltiplas URLs (CTRL+D para finalizar)\033[0m")
    print("\033[1;33m[‚Ä¢] Cole as URLs uma por linha:\033[0m")

    urls = []
    try:
        while True:
            url = input().strip()
            if url.startswith(('http://', 'https://')):
                urls.append(url)
            elif url:
                print("\033[1;31m[!] URL inv√°lida. Deve come√ßar com http:// ou https://\033[0m")
    except EOFError:
        pass

    if not urls:
        print("\033[1;31m[!] Nenhuma URL v√°lida fornecida\033[0m")
        return

    if tipo == 'video':
        mostrar_menu_video_qualidade()
        opcao = input("\n\033[1;36müé¨ Escolha a qualidade [1-5]: \033[0m").strip()
        if opcao in FORMATOS_VIDEO:
            qualidade = FORMATOS_VIDEO[opcao]['code']
        else:
            qualidade = 'best'
    else:
        mostrar_menu_audio_formatos()
        opcao = input("\n\033[1;36müéµ Escolha o formato [1-6]: \033[0m").strip()
        if opcao in FORMATOS_AUDIO:
            formato = FORMATOS_AUDIO[opcao]
        else:
            formato = FORMATOS_AUDIO['1']

    for i, url in enumerate(urls, 1):
        print(f"\n\033[1;35m[‚Ä¢] Baixando URL {i}/{len(urls)}\033[0m")
        if tipo == 'video':
            baixar_video(url, 'mp4', qualidade)
        else:
            baixar_video(url, formato['code'], None, formato['params'])

def baixar_video(link, formato='mp4', qualidade=None, params_extra=None):
    """Executa o download com m√∫ltiplas estrat√©gias e fallback autom√°tico"""
    tentativas = [
        f'yt-dlp --user-agent "{USER_AGENT}" --cookies "{ARQUIVO_COOKIES}" --no-check-certificate',
        f'yt-dlp --user-agent "{USER_AGENT}" --cookies "{ARQUIVO_COOKIES}" --force-generic-extractor',
        'yt-dlp --ignore-errors'
    ]

    output_template = f'"{PASTA_DOWNLOADS}/%(title)s.%(ext)s"'
    comando_base = None

    # Construir o comando baseado nos par√¢metros
    if params_extra:
        comando_base = f'{params_extra} -o {output_template}'
    elif formato == 'mp3':
        comando_base = f'-x --audio-format mp3 --audio-quality 0 -o {output_template}'
    elif qualidade:
        # Verifica se o formato solicitado existe antes de tentar
        if qualidade in ['best', '22', '18', '137+140', '135+140']:
            comando_base = f'-f "{qualidade}+bestaudio" --merge-output-format {formato} -o {output_template}'
        else:
            comando_base = f'-f best -o {output_template}'
    else:
        comando_base = f'-f best -o {output_template}'

    for tentativa, cmd in enumerate(tentativas, 1):
        print(f"\n\033[1;35m[‚Ä¢] Tentativa {tentativa}/3\033[0m")
        comando = f'{cmd} {comando_base} "{link}"'

        try:
            print(f"\033[1;33m[‚Ä¢] Executando: {comando[:120]}...\033[0m")
            
            # Se falhar na primeira tentativa com formato espec√≠fico, tentar com fallback
            if tentativa > 1 and qualidade and qualidade != 'best':
                print("\033[1;33m[‚Ä¢] Tentando fallback para melhor qualidade dispon√≠vel...\033[0m")
                comando = f'{cmd} -f best -o {output_template} "{link}"'

            resultado = subprocess.run(comando, shell=True, check=True)
            if resultado.returncode == 0:
                print(f"\033[1;32m[‚úì] Download conclu√≠do com sucesso!\033[0m")
                return True

        except subprocess.CalledProcessError as e:
            # Se falhar por formato n√£o dispon√≠vel, tentar listar formatos
            if "Requested format is not available" in str(e):
                print("\033[1;33m[‚Ä¢] Formato solicitado n√£o dispon√≠vel. Listando formatos...\033[0m")
                subprocess.run(f'yt-dlp --list-formats "{link}"', shell=True)
                
                # Perguntar ao usu√°rio qual formato usar
                novo_formato = input("\033[1;36m[?] Digite o c√≥digo do formato desejado (ou Enter para melhor qualidade): \033[0m").strip()
                if novo_formato:
                    comando_base = f'-f "{novo_formato}+bestaudio" --merge-output-format {formato} -o {output_template}'
                    continue
                else:
                    comando_base = f'-f best -o {output_template}'
                    continue
            
            print(f"\033[1;31m[!] Erro na tentativa {tentativa}: {str(e)}\033[0m")
        except Exception as e:
            print(f"\033[1;31m[!] Erro inesperado na tentativa {tentativa}: {str(e)}\033[0m")

    print("\033[1;31m[!] Todas as tentativas falharam. Verifique sua conex√£o e a URL.\033[0m")
    return False

def mostrar_menu_config():
    global ATUALIZAR_COOKIES_AUTO
    while True:
        clear_screen()
        print("""\033[1;36m
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           ‚öôÔ∏è  CONFIGURA√á√ïES             ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë 1. {} Atualiza√ß√£o autom√°tica de cookies‚ïë
‚ïë 2. ‚ö° Instalar todas as depend√™ncias   ‚ïë
‚ïë 0. üîô Voltar ao menu principal         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
\033[0m""".format("‚úÖ" if ATUALIZAR_COOKIES_AUTO else "‚ùå"))

        opcao = input("\n\033[1;36m‚öôÔ∏è Escolha uma op√ß√£o: \033[0m").strip()

        if opcao == "0":
            break
        elif opcao == "1":
            ATUALIZAR_COOKIES_AUTO = not ATUALIZAR_COOKIES_AUTO
            status = "ativada" if ATUALIZAR_COOKIES_AUTO else "desativada"
            print(f"\033[1;32m[‚úì] Atualiza√ß√£o autom√°tica de cookies {status}\033[0m")
            sleep(1)
        elif opcao == "2":
            instalar_dependencias_auto()
            input("\n\033[1;36mPressione Enter para continuar...\033[0m")
        else:
            print("\033[1;31m[!] Op√ß√£o inv√°lida. Tente novamente.\033[0m")
            sleep(1)

def mostrar_menu_principal():
    print("""\033[1;36m
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë    üé¨ WOLF VIDEO DOWNLOADER PREMIUM    ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë 1. üé• Baixar v√≠deo (melhor qualidade)  ‚ïë
‚ïë 2. üìä Escolher qualidade espec√≠fica    ‚ïë
‚ïë 3. üéß Converter para √°udio             ‚ïë
‚ïë 4. üìã Listar formatos dispon√≠veis      ‚ïë
‚ïë 5. üîÑ Atualizar ferramentas            ‚ïë
‚ïë 6. üç™ Atualizar cookies manualmente    ‚ïë
‚ïë 7. ‚öôÔ∏è Configura√ß√µes                     ‚ïë
‚ïë 8. üìÇ Baixar m√∫ltiplos v√≠deos          ‚ïë
‚ïë 9. üé∂ Baixar m√∫ltiplos √°udios          ‚ïë
‚ïë 0. üö™ Sair                             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
\033[0m""")

def main():
    clear_screen()
    mostrar_banner()

    # Configura√ß√£o completa do ambiente
    verificar_e_configurar_ambiente()

    # Verifica se √© Termux e ajusta permiss√µes
    if 'com.termux' in HOME:
        print("\033[1;33m[‚Ä¢] Modo Termux detectado\033[0m")
        if not os.path.exists(PASTA_DOWNLOADS):
            os.makedirs(PASTA_DOWNLOADS, mode=0o755, exist_ok=True)

    while True:
        mostrar_menu_principal()
        opcao = input("\n\033[1;36m‚ú® Escolha uma op√ß√£o [0-9]: \033[0m").strip()

        if opcao == "0":
            print("\n\033[1;32m[‚úì] Programa encerrado.\033[0m")
            break
        elif opcao == "7":
            mostrar_menu_config()
        elif opcao == "6":
            atualizar_cookies()
        elif opcao == "5":
            atualizar_ferramentas()
        elif opcao == "8":
            baixar_multiplas_urls(tipo='video')
        elif opcao == "9":
            baixar_multiplas_urls(tipo='audio')
        elif opcao in ["1", "2", "3", "4"]:
            link = input("\n\033[1;36müîó Digite a URL do v√≠deo: \033[0m").strip()

            if not link.startswith(('http://', 'https://')):
                print("\033[1;31m[!] URL inv√°lida. Deve come√ßar com http:// ou https://\033[0m")
                continue

            if opcao == "4":
                listar_formatos(link)
            elif opcao == "3":
                mostrar_menu_audio_formatos()
                opcao_audio = input("\n\033[1;36müéµ Escolha o formato [1-6]: \033[0m").strip()
                if opcao_audio in FORMATOS_AUDIO:
                    formato = FORMATOS_AUDIO[opcao_audio]
                    if baixar_video(link, formato['code'], None, formato['params']):
                        print(f"\033[1;32m[‚úì] Arquivo salvo em: {PASTA_DOWNLOADS}\033[0m")
            elif opcao == "1":
                if baixar_video(link, 'mp4'):
                    print(f"\033[1;32m[‚úì] Arquivo salvo em: {PASTA_DOWNLOADS}\033[0m")
            elif opcao == "2":
                listar_formatos(link)
        else:
            print("\033[1;31m[!] Op√ß√£o inv√°lida. Tente novamente.\033[0m")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\033[1;31m[!] Programa interrompido pelo usu√°rio.\033[0m")
        sys.exit(0)
